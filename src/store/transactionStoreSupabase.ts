import { create } from "zustand"
import type { Transaction, CreateTransactionData, SupabaseTransactionRow } from "@/types"
import { supabase } from "@/lib/supabase"
import { offlineUtils } from "@/hooks/useOfflineSync"
import { offlineDataManager } from "@/utils/offlineDataManager"

interface TransactionState {
  transactions: Transaction[]
  loading: boolean
  error: string | null
  isOfflineMode: boolean
  lastSyncTime: number | null

  // Actions
  fetchTransactions: () => Promise<void>
  addTransaction: (transaction: CreateTransactionData) => Promise<void>
  addTransactionOffline: (transaction: CreateTransactionData) => Promise<void>
  updateTransaction: (id: string, updates: Partial<CreateTransactionData>) => Promise<void>
  deleteTransaction: (id: string) => Promise<void>
  loadFromCache: () => Promise<void>
  clearError: () => void
  setLoading: (loading: boolean) => void
  setError: (error: string) => void
  setOfflineMode: (isOffline: boolean) => void
}

export const useTransactionStoreSupabase = create<TransactionState>((set, get) => ({
  transactions: [],
  loading: false,
  error: null,
  isOfflineMode: false,
  lastSyncTime: null,

  fetchTransactions: async (): Promise<void> => {
    console.log("üîÑ Fetching transactions...")
    set({ loading: true, error: null })

    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
    try {
      const cachedTransactions = await offlineUtils.getTransactionsFromCache()
      console.log(`üì¶ Cache loaded: ${cachedTransactions.length} transactions`)

      if (cachedTransactions.length > 0) {
        set({
          transactions: cachedTransactions,
          isOfflineMode: false // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∏–º —Å–µ—Ç—å –¥–∞–ª–µ–µ
        })
        console.log(`‚úÖ Cache data set to store: ${cachedTransactions.length} transactions`)
      } else {
        console.log("‚ö†Ô∏è No cached transactions found")
      }
    } catch (cacheError) {
      console.error("‚ùå Cache loading failed:", cacheError)
      // Failed to load transactions from cache
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
    try {
      const { data, error } = await supabase
        .from("transactions")
        .select(
          `
          *,
          global_categories (
            id,
            name,
            color,
            icon,
            type
          )
        `
        )
        .order("date", { ascending: false })

      if (error) throw error

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      const serverTransactions: Transaction[] = (data as SupabaseTransactionRow[]).map(
        (row: SupabaseTransactionRow) => ({
          id: row.id,
          amount: parseFloat(row.amount),
          type: row.type,
          categoryId: row.category_id,
          description: row.description,
          date: row.date,
          createdAt: row.created_at,
          updatedAt: row.updated_at
        })
      )

      // –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
      const { transactions: currentTransactions } = get()

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const mergedTransactions = offlineDataManager.mergeTransactions(
        currentTransactions,
        serverTransactions
      )

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
      try {
        await offlineUtils.saveTransactionsToCache(mergedTransactions)
      } catch (_cacheError) {
        // Failed to save transactions to cache
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ñ–ª–∞–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await offlineDataManager.cleanupOldOfflineTransactions()

      set({
        transactions: mergedTransactions,
        loading: false,
        isOfflineMode: false,
        lastSyncTime: Date.now()
      })
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to fetch transactions"

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      const { transactions } = get()
      if (transactions.length > 0) {
        set({
          loading: false,
          isOfflineMode: true,
          error: null
        })
      } else {
        set({
          error: errorMessage,
          loading: false,
          isOfflineMode: true
        })
      }
    }
  },

  loadFromCache: async (): Promise<void> => {
    set({ loading: true, error: null })

    try {
      const cachedTransactions = await offlineUtils.getTransactionsFromCache()

      set({
        transactions: cachedTransactions,
        loading: false,
        isOfflineMode: true
      })
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : "Failed to load transactions from cache"

      set({
        error: errorMessage,
        loading: false,
        isOfflineMode: true
      })
    }
  },

  addTransaction: async (transactionData: CreateTransactionData): Promise<void> => {
    console.log("üö®üö®üö® STORE addTransaction CALLED:", transactionData.description)
    alert(`üö® STORE: addTransaction –í–´–ó–í–ê–ù –¥–ª—è "${transactionData.description}"`)
    set({ loading: true, error: null })

    try {
      const {
        data: { user }
      } = await supabase.auth.getUser()
      if (!user) throw new Error("User not authenticated")

      const result = await supabase
        .from("transactions")
        .insert([
          {
            user_id: user.id,
            amount: transactionData.amount,
            type: transactionData.type,
            category_id: transactionData.categoryId,
            description: transactionData.description,
            date: transactionData.date
          }
        ])
        .select()
        .single()

      if (result.error) throw result.error
      if (!result.data) throw new Error("No data returned from insert")

      const transactionRow = result.data as SupabaseTransactionRow

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const newTransaction: Transaction = {
        id: transactionRow.id,
        amount: parseFloat(transactionRow.amount),
        type: transactionRow.type,
        categoryId: transactionRow.category_id,
        description: transactionRow.description,
        date: transactionRow.date,
        createdAt: transactionRow.created_at,
        updatedAt: transactionRow.updated_at
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const { transactions } = get()
      const updatedTransactions = [newTransaction, ...transactions]

      // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞
      try {
        console.log("üö®üö®üö® CACHING START:", updatedTransactions.length, "transactions")
        alert(`üö® –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∏–Ω–∞—é –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å ${updatedTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
        await offlineUtils.saveTransactionsToCache(updatedTransactions)
        console.log(`‚úÖ Transaction cached for offline access`)
        alert("üö® –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
      } catch (cacheError) {
        console.error("‚ùå Caching failed:", cacheError)
        alert(`üö® –û–®–ò–ë–ö–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø: ${cacheError}`)
        // Failed to save to cache, but transaction was saved to server
      }

      set({
        transactions: updatedTransactions,
        loading: false
      })
    } catch (error: unknown) {
      console.log("üî¥ addTransaction error:", error)
      const errorMessage = error instanceof Error ? error.message : "Failed to add transaction"

      // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ñ–ª–∞–π–Ω –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à
      console.log("üü° Should save to offline cache here")

      set({
        error: errorMessage,
        loading: false
      })
      throw error
    }
  },

  updateTransaction: async (id: string, updates: Partial<CreateTransactionData>): Promise<void> => {
    set({ loading: true, error: null })

    try {
      const updateData: Record<string, unknown> = {}

      if (updates.amount !== undefined) updateData.amount = updates.amount
      if (updates.type !== undefined) updateData.type = updates.type
      if (updates.categoryId !== undefined) updateData.category_id = updates.categoryId
      if (updates.description !== undefined) updateData.description = updates.description
      if (updates.date !== undefined) updateData.date = updates.date

      const result = await supabase
        .from("transactions")
        .update(updateData)
        .eq("id", id)
        .select()
        .single()

      if (result.error) throw result.error
      if (!result.data) throw new Error("No data returned from update")

      const transactionRow = result.data as SupabaseTransactionRow

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const { transactions } = get()
      const updatedTransactions = transactions.map((transaction) =>
        transaction.id === id
          ? {
              ...transaction,
              amount: transactionRow.amount
                ? parseFloat(transactionRow.amount)
                : transaction.amount,
              type: transactionRow.type ?? transaction.type,
              categoryId: transactionRow.category_id ?? transaction.categoryId,
              description: transactionRow.description ?? transaction.description,
              date: transactionRow.date ?? transaction.date,
              updatedAt: transactionRow.updated_at
            }
          : transaction
      )

      set({
        transactions: updatedTransactions,
        loading: false
      })
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to update transaction"
      set({
        error: errorMessage,
        loading: false
      })
      throw error
    }
  },

  deleteTransaction: async (id: string): Promise<void> => {
    set({ loading: true, error: null })

    try {
      const { error } = await supabase.from("transactions").delete().eq("id", id)

      if (error) throw error

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const { transactions } = get()
      const updatedTransactions = transactions.filter((transaction) => transaction.id !== id)

      set({
        transactions: updatedTransactions,
        loading: false
      })
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to delete transaction"
      // console.error("Error deleting transaction:", error)
      set({
        error: errorMessage,
        loading: false
      })
      throw error
    }
  },

  addTransactionOffline: async (transactionData: CreateTransactionData): Promise<void> => {
    console.log("üö®üö®üö® STORE addTransactionOffline CALLED:", transactionData.description)
    alert(`üö® STORE: addTransactionOffline –í–´–ó–í–ê–ù –¥–ª—è "${transactionData.description}"`)
    set({ loading: true, error: null })

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º offlineDataManager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const offlineTransaction = await offlineDataManager.createOfflineTransaction(transactionData)

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const { transactions } = get()
      const updatedTransactions = [offlineTransaction, ...transactions]

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      console.log("üö®üö®üö® OFFLINE CACHING START:", updatedTransactions.length, "transactions")
      alert(`üö® –û–§–õ–ê–ô–ù –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∏–Ω–∞—é –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å ${updatedTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
      await offlineUtils.saveTransactionsToCache(updatedTransactions)
      alert("üö® –û–§–õ–ê–ô–ù –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

      set({
        transactions: updatedTransactions,
        loading: false,
        isOfflineMode: true
      })
    } catch (error: unknown) {
      console.log("üî¥ addTransactionOffline error:", error)
      const errorMessage =
        error instanceof Error ? error.message : "Failed to add transaction offline"
      set({
        error: errorMessage,
        loading: false
      })
      throw error
    }
  },

  clearError: (): void => set({ error: null }),
  setLoading: (loading: boolean): void => set({ loading }),
  setError: (error: string): void => set({ error }),
  setOfflineMode: (isOffline: boolean): void => set({ isOfflineMode: isOffline })
}))

// Real-time –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
supabase
  .channel("transactions")
  .on(
    "postgres_changes",
    {
      event: "*",
      schema: "public",
      table: "transactions"
    },
    (_payload) => {
      // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–∑–≤–Ω–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const store = useTransactionStoreSupabase.getState()
      if (!store.loading) {
        store.fetchTransactions()
      }
    }
  )
  .subscribe()
