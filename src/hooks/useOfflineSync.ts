import { useState, useEffect, useCallback } from "react"
import { indexedDBManager } from "@/utils/indexedDB"
import { useNetworkStatus } from "@/hooks/useNetworkStatus"
import { supabaseSync } from "@/utils/supabaseSync"
import { offlineDataManager } from "@/utils/offlineDataManager"
import type { Category } from "@/types/category"
import type { Transaction, CreateTransactionData } from "@/types/transaction"

interface SyncStatus {
  isSyncing: boolean
  lastSyncTime: number | null
  pendingOperations: number
  error: string | null
}

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏
interface OfflineTransactionOperation {
  type: "create" | "update" | "delete"
  table: "transactions"
  data: CreateTransactionData & { tempId?: string }
}

interface OfflineCategoryOperation {
  type: "create" | "update" | "delete"
  table: "categories"
  data: Category
}

type OfflineOperationInput = OfflineTransactionOperation | OfflineCategoryOperation

interface UseOfflineSyncReturn {
  syncStatus: SyncStatus
  isOfflineDataAvailable: boolean
  syncNow: () => Promise<void>
  addOfflineOperation: (operation: OfflineOperationInput) => Promise<string>
  clearOfflineData: () => Promise<void>
}

export const useOfflineSync = (): UseOfflineSyncReturn => {
  const { isOnline } = useNetworkStatus()
  const [syncStatus, setSyncStatus] = useState<SyncStatus>({
    isSyncing: false,
    lastSyncTime: null,
    pendingOperations: 0,
    error: null
  })
  const [isOfflineDataAvailable, setIsOfflineDataAvailable] = useState(false)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initDB = async (): Promise<void> => {
      try {
        await indexedDBManager.init()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
        const hasData = await indexedDBManager.isDataAvailable()
        setIsOfflineDataAvailable(hasData)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const lastSync = await indexedDBManager.getLastSyncTime()
        const queue = await indexedDBManager.getOfflineQueue()

        setSyncStatus((prev) => ({
          ...prev,
          lastSyncTime: lastSync,
          pendingOperations: queue.length
        }))
      } catch {
        // Failed to initialize IndexedDB - check if localStorage fallback works
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å localStorage
          localStorage.setItem("_finance_tracker_test_", "test")
          localStorage.removeItem("_finance_tracker_test_")

          // localStorage —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å localStorage fallback
          setSyncStatus((prev) => ({
            ...prev,
            error: null // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ fallback —Ä–∞–±–æ—Ç–∞–µ—Ç
          }))
        } catch {
          // –ò localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          setSyncStatus((prev) => ({
            ...prev,
            error: "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏."
          }))
        }
      }
    }

    initDB()
  }, [])

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const syncNow = useCallback(async (): Promise<void> => {
    if (!isOnline) {
      throw new Error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    }

    if (syncStatus.isSyncing) {
      return // –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è
    }

    setSyncStatus((prev) => ({ ...prev, isSyncing: true, error: null }))

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const queue = await indexedDBManager.getOfflineQueue()

      if (queue.length === 0) {
        setSyncStatus((prev) => ({
          ...prev,
          isSyncing: false,
          lastSyncTime: Date.now()
        }))
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
      const isSupabaseAvailable = await supabaseSync.isSupabaseAvailable()
      if (!isSupabaseAvailable) {
        throw new Error("Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞–º–∏
      const { successful, failed } = await supabaseSync.syncBatch(queue, 3)

      // –ü–æ–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
      for (const { operationId, newId } of successful) {
        await indexedDBManager.markOperationAsSynced(operationId)

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π ID (–¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π), –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (newId) {
          try {
            // –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å tempId
            const operation = queue.find((op) => op.id === operationId)

            if (operation && operation.table === "transactions") {
              const operationData = operation.data as CreateTransactionData & { tempId?: string }
              if (operationData.tempId) {
                // –û–±–Ω–æ–≤–ª—è–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ IndexedDB
                await offlineDataManager.replaceTemporaryId(operationData.tempId, newId)
              }
            }
          } catch (_error) {
            // Failed to update temporary ID
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
          }
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      if (failed.length > 0) {
        const errorMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${failed.length} –æ–ø–µ—Ä–∞—Ü–∏–π`
        setSyncStatus((prev) => ({
          ...prev,
          error: errorMessage
        }))
      }

      // –û—á–∏—â–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await indexedDBManager.clearSyncedOperations()
      await indexedDBManager.setLastSyncTime()

      setSyncStatus((prev) => ({
        ...prev,
        isSyncing: false,
        lastSyncTime: Date.now(),
        pendingOperations: 0
      }))
    } catch (_error) {
      // Sync failed
      setSyncStatus((prev) => ({
        ...prev,
        isSyncing: false,
        error: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
      }))
    }
  }, [isOnline, syncStatus.isSyncing])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
  useEffect(() => {
    if (isOnline && syncStatus.pendingOperations > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
      const timer = setTimeout(() => {
        syncNow().catch((): void => {
          // Auto sync failed, will retry later
        })
      }, 2000)

      return (): void => clearTimeout(timer)
    }
  }, [isOnline, syncStatus.pendingOperations, syncNow])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å
  const addOfflineOperation = useCallback(
    async (operation: OfflineOperationInput): Promise<string> => {
      try {
        const operationId = await indexedDBManager.addToOfflineQueue({
          ...operation,
          timestamp: Date.now(),
          synced: false
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ pending –æ–ø–µ—Ä–∞—Ü–∏–π
        const queue = await indexedDBManager.getOfflineQueue()
        setSyncStatus((prev) => ({
          ...prev,
          pendingOperations: queue.length
        }))

        return operationId
      } catch (_error) {
        // Failed to add offline operation
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
      }
    },
    []
  )

  // –û—á–∏—Å—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  const clearOfflineData = useCallback(async (): Promise<void> => {
    try {
      await indexedDBManager.clearAllData()
      setIsOfflineDataAvailable(false)
      setSyncStatus((prev) => ({
        ...prev,
        lastSyncTime: null,
        pendingOperations: 0,
        error: null
      }))
    } catch (_error) {
      // Failed to clear offline data
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ")
    }
  }, [])

  return {
    syncStatus,
    isOfflineDataAvailable,
    syncNow,
    addOfflineOperation,
    clearOfflineData
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–º–∏
export const offlineUtils = {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  saveCategoriesToCache: async (categories: Category[]): Promise<void> => {
    await indexedDBManager.saveCategories(categories)
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  getCategoriesFromCache: async (): Promise<Category[]> => {
    return await indexedDBManager.getCategories()
  },

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  saveTransactionsToCache: async (transactions: Transaction[]): Promise<void> => {
    console.log("üö®üö®üö® saveTransactionsToCache called:", transactions.length)
    // alert —É–±—Ä–∞–Ω –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
    await indexedDBManager.saveTransactions(transactions)
    console.log("üü¢ saveTransactionsToCache completed")
    // alert —É–±—Ä–∞–Ω –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  getTransactionsFromCache: async (): Promise<Transaction[]> => {
    console.log("üì¶ Getting transactions from cache...")
    const result = await indexedDBManager.getTransactions()
    console.log(`üì¶ Retrieved ${result.length} transactions from cache`)
    return result
  },

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  saveTransactionOffline: async (transaction: Transaction): Promise<void> => {
    await indexedDBManager.saveTransaction(transaction)
  }
}
