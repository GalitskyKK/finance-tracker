import React, { useState, useEffect, useMemo } from "react"
import type {
  SavingsGoal,
  CreateSavingsGoalData,
  UpdateSavingsGoalData,
  CreateSavingsTransactionData
} from "@/types"
import { useSavingsStoreSupabase } from "@/store/savingsStoreSupabase"
import { useTransactionStoreSupabase } from "@/store/transactionStoreSupabase"
import { SavingsGoalCard } from "@/components/ui/SavingsGoalCard"
import { SavingsGoalForm } from "@/components/forms/SavingsGoalForm"
import { SavingsTransactionModal } from "@/components/forms/SavingsTransactionModal"
import { PageHeader } from "@/components/ui/PageHeader"
import { Button } from "@/components/ui/Button"
import { formatCurrency } from "@/utils/formatters"

const Savings: React.FC = () => {
  const {
    savingsGoals,
    loading,
    error,
    fetchSavingsGoals,
    addSavingsGoal,
    updateSavingsGoal,
    deleteSavingsGoal,
    getTotalSavingsAmount,
    addSavingsTransaction,
    getBalanceWithSavings,
    clearError
  } = useSavingsStoreSupabase()

  const { transactions } = useTransactionStoreSupabase()

  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [editingGoal, setEditingGoal] = useState<SavingsGoal | null>(null)
  const [formLoading, setFormLoading] = useState(false)

  // States for transaction modals
  const [transactionModalOpen, setTransactionModalOpen] = useState(false)
  const [transactionType, setTransactionType] = useState<"deposit" | "withdraw">("deposit")
  const [selectedGoal, setSelectedGoal] = useState<SavingsGoal | null>(null)
  const [transactionLoading, setTransactionLoading] = useState(false)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchSavingsGoals()
  }, [fetchSavingsGoals])

  // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      clearError()
    }
  }, [clearError])

  // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å —É—á–µ—Ç–æ–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
  const balanceData = useMemo(() => {
    const totalIncome = transactions
      .filter((t) => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0)

    const totalExpenses = transactions
      .filter((t) => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0)

    const totalBalance = totalIncome - totalExpenses

    return getBalanceWithSavings(totalBalance)
  }, [transactions, getBalanceWithSavings])

  const totalSavingsAmount = getTotalSavingsAmount()
  const activeGoals = savingsGoals.filter((goal) => goal.isActive)
  const completedGoals = activeGoals.filter((goal) => goal.currentAmount >= goal.targetAmount)
  const inProgressGoals = activeGoals.filter((goal) => goal.currentAmount < goal.targetAmount)

  const handleCreateGoal = async (data: CreateSavingsGoalData): Promise<void> => {
    setFormLoading(true)
    try {
      await addSavingsGoal(data)
      setIsCreateModalOpen(false)
    } catch (error) {
      console.error("Failed to create savings goal:", error)
      throw error
    } finally {
      setFormLoading(false)
    }
  }

  const handleUpdateGoal = async (data: UpdateSavingsGoalData): Promise<void> => {
    setFormLoading(true)
    try {
      await updateSavingsGoal(data)
      setEditingGoal(null)
    } catch (error) {
      console.error("Failed to update savings goal:", error)
      throw error
    } finally {
      setFormLoading(false)
    }
  }

  const handleDeleteGoal = async (goalId: string): Promise<void> => {
    const goal = savingsGoals.find((g) => g.id === goalId)
    if (!goal) return

    const confirmed = window.confirm(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å "${goal.name}"?\n\n` +
        `–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
    )

    if (confirmed) {
      try {
        await deleteSavingsGoal(goalId)
      } catch (error) {
        console.error("Failed to delete savings goal:", error)
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
      }
    }
  }

  const handleSavingsTransaction = async (data: CreateSavingsTransactionData): Promise<void> => {
    setTransactionLoading(true)
    try {
      await addSavingsTransaction(data)
      setTransactionModalOpen(false)
      setSelectedGoal(null)
    } catch (error) {
      console.error("Failed to process savings transaction:", error)
      throw error
    } finally {
      setTransactionLoading(false)
    }
  }

  const handleDeposit = (goalId: string): void => {
    const goal = savingsGoals.find((g) => g.id === goalId)
    if (goal) {
      setSelectedGoal(goal)
      setTransactionType("deposit")
      setTransactionModalOpen(true)
    }
  }

  const handleWithdraw = (goalId: string): void => {
    const goal = savingsGoals.find((g) => g.id === goalId)
    if (goal) {
      setSelectedGoal(goal)
      setTransactionType("withdraw")
      setTransactionModalOpen(true)
    }
  }

  const handleCloseTransactionModal = (): void => {
    setTransactionModalOpen(false)
    setSelectedGoal(null)
    setTransactionType("deposit")
  }

  const handleEdit = (goalId: string): void => {
    const goal = savingsGoals.find((g) => g.id === goalId)
    if (goal) {
      setEditingGoal(goal)
    }
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <PageHeader title="–ö–æ–ø–∏–ö–æ–ø–∏" />
        <div className="text-center py-12">
          <div className="text-red-500 text-6xl mb-4">‚ùå</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <Button onClick={() => fetchSavingsGoals()}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8 space-y-8">
      {/* Header */}
      <PageHeader title="–ö–æ–ø–∏–ö–æ–ø–∏" subtitle="–í–∞—à–∏ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏" />

      {/* Balance overview */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">üí∞ –û–±–∑–æ—Ä –±–∞–ª–∞–Ω—Å–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center">
            <p className="text-sm text-gray-600 mb-1">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</p>
            <p className="text-2xl font-bold text-gray-900">
              {formatCurrency(balanceData.totalBalance)}
            </p>
          </div>
          <div className="text-center">
            <p className="text-sm text-emerald-600 mb-1">–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞</p>
            <p className="text-2xl font-bold text-emerald-600">
              {formatCurrency(balanceData.availableBalance)}
            </p>
          </div>
          <div className="text-center">
            <p className="text-sm text-blue-600 mb-1">–í —Ü–µ–ª—è—Ö –ö–æ–ø–∏–ö–æ–ø–∏</p>
            <p className="text-2xl font-bold text-blue-600">
              {formatCurrency(balanceData.reservedBalance)}
            </p>
          </div>
        </div>
        {balanceData.availableBalance < 0 && (
          <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-start space-x-2">
              <span className="text-red-500 text-lg">‚ö†Ô∏è</span>
              <div className="text-sm text-red-800">
                <p className="font-medium">–í–Ω–∏–º–∞–Ω–∏–µ!</p>
                <p>
                  –£ –≤–∞—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å
                  –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ü–µ–ª–µ–π.
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Summary cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-medium opacity-90">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
              <p className="text-3xl font-bold">{inProgressGoals.length}</p>
            </div>
            <div className="text-4xl opacity-80">üéØ</div>
          </div>
        </div>

        <div className="bg-gradient-to-br from-amber-500 to-amber-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-medium opacity-90">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</h3>
              <p className="text-3xl font-bold">{completedGoals.length}</p>
            </div>
            <div className="text-4xl opacity-80">üèÜ</div>
          </div>
        </div>

        <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-medium opacity-90">–í—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ</h3>
              <p className="text-3xl font-bold">{formatCurrency(totalSavingsAmount)}</p>
            </div>
            <div className="text-4xl opacity-80">üí∞</div>
          </div>
        </div>
      </div>

      {/* Action button */}
      <div className="flex justify-center">
        <Button
          onClick={() => setIsCreateModalOpen(true)}
          variant="primary"
          size="lg"
          className="px-8">
          ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å
        </Button>
      </div>

      {/* Goals list */}
      {loading && activeGoals.length === 0 ? (
        <div className="text-center py-12">
          <div className="animate-spin text-4xl mb-4">‚è≥</div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Ü–µ–ª–∏...</p>
        </div>
      ) : activeGoals.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üéØ</div>
          <h3 className="text-xl font-medium text-gray-900 mb-2">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π</h3>
          <p className="text-gray-600 mb-6">
            –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–ø–∏—Ç—å –Ω–∞ –º–µ—á—Ç—É!
          </p>
          <Button onClick={() => setIsCreateModalOpen(true)} variant="primary">
            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ü–µ–ª—å
          </Button>
        </div>
      ) : (
        <div className="space-y-8">
          {/* In progress goals */}
          {inProgressGoals.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ ({inProgressGoals.length})
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {inProgressGoals.map((goal) => (
                  <SavingsGoalCard
                    key={goal.id}
                    goal={goal}
                    onDeposit={handleDeposit}
                    onWithdraw={handleWithdraw}
                    onEdit={handleEdit}
                    onDelete={handleDeleteGoal}
                  />
                ))}
              </div>
            </div>
          )}

          {/* Completed goals */}
          {completedGoals.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ ({completedGoals.length})
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {completedGoals.map((goal) => (
                  <SavingsGoalCard
                    key={goal.id}
                    goal={goal}
                    onWithdraw={handleWithdraw}
                    onEdit={handleEdit}
                    onDelete={handleDeleteGoal}
                    showActions={true}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Create goal modal */}
      <SavingsGoalForm
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSubmit={handleCreateGoal}
        loading={formLoading}
      />

      {/* Edit goal modal */}
      <SavingsGoalForm
        isOpen={!!editingGoal}
        onClose={() => setEditingGoal(null)}
        onSubmit={handleUpdateGoal}
        goal={editingGoal || undefined}
        loading={formLoading}
      />

      {/* Savings transaction modal */}
      <SavingsTransactionModal
        isOpen={transactionModalOpen}
        onClose={handleCloseTransactionModal}
        onSubmit={handleSavingsTransaction}
        goal={selectedGoal}
        type={transactionType}
        loading={transactionLoading}
        availableBalance={balanceData.availableBalance}
      />
    </div>
  )
}

export default Savings
