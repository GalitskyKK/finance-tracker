import { useState, useEffect, Suspense, useCallback } from "react"
import React from "react"
import { Layout } from "@/components/layout/Layout"
import { DataMigrationModal } from "@/components/migration/DataMigrationModal"
import { AutoFixIndexedDB } from "@/components/AutoFixIndexedDB"

// Lazy load —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è code splitting
const Dashboard = React.lazy(() => import("@/pages/Dashboard"))
const Transactions = React.lazy(() => import("@/pages/Transactions"))
const Analytics = React.lazy(() => import("@/pages/Analytics"))
const Savings = React.lazy(() => import("@/pages/Savings"))
import { useAuthStore } from "@/store/authStore"
import { useTransactionStoreSupabase } from "@/store/transactionStoreSupabase"
import { useCategoryStoreSupabase } from "@/store/categoryStoreSupabase"
import { useNetworkStatus } from "@/hooks/useNetworkStatus"
// import { useOfflineSync } from "@/hooks/useOfflineSync" // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
import { getDataStats } from "@/utils/dataExport"

export const AppWithMigration: React.FC = () => {
  const [currentPage, setCurrentPage] = useState("dashboard")
  const [showMigrationModal, setShowMigrationModal] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)

  const { isAuthenticated, user, loading: authLoading } = useAuthStore()
  // Removed unused: fetchTransactions, loadFromCache, fetchCategories, syncNow, syncStatus
  const { isOnline } = useNetworkStatus()

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    const initializeData = async (): Promise<void> => {
      if (!isAuthenticated || !user || authLoading) {
        return
      }

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      if (isInitialized) {
        return
      }

      try {
        // Initializing data for user

        console.log(`üîÑ Initializing data in ${isOnline ? "ONLINE" : "OFFLINE"} mode`)

        // –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB!
        try {
          const { indexedDBManager } = await import("@/utils/indexedDB")
          console.log("üîÑ Pre-initializing IndexedDB...")
          await indexedDBManager.init()
          console.log("‚úÖ IndexedDB pre-initialized successfully!")
        } catch (error) {
          console.log("‚ö†Ô∏è IndexedDB pre-init failed, will use fallback:", error)
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ store
        const { fetchTransactions: freshFetchTransactions, loadFromCache: freshLoadFromCache } =
          useTransactionStoreSupabase.getState()
        const { fetchCategories: freshFetchCategories, loadFromCache: loadCategoriesFromCache } =
          useCategoryStoreSupabase.getState()

        if (isOnline) {
          // –û–Ω–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å retry –¥–ª—è IndexedDB
          let retryCount = 0
          const maxRetries = 3

          while (retryCount < maxRetries) {
            try {
              console.log(
                `üîÑ Attempting to load online data (attempt ${retryCount + 1}/${maxRetries})`
              )
              await Promise.all([freshFetchCategories(), freshFetchTransactions()])
              console.log("‚úÖ Online data loaded")
              break // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏
            } catch (error) {
              retryCount++
              console.error(`‚ùå Online loading attempt ${retryCount} failed:`, error)

              if (retryCount < maxRetries) {
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π - –¥–∞—Ç—å IndexedDB –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
                console.log(`‚è≥ Waiting 1s before retry ${retryCount + 1}...`)
                await new Promise((resolve) => setTimeout(resolve, 1000))
              } else {
                console.log("‚ùå All online loading attempts failed")
                // Failed to load after all retries
              }
            }
          }
        } else {
          // –û—Ñ–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∫—ç—à–∞ —Å retry –¥–ª—è IndexedDB
          let retryCount = 0
          const maxRetries = 3

          while (retryCount < maxRetries) {
            try {
              console.log(`üîÑ Attempting to load cache (attempt ${retryCount + 1}/${maxRetries})`)
              await Promise.all([loadCategoriesFromCache(), freshLoadFromCache()])
              console.log("‚úÖ Offline data loaded from cache")
              break // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏
            } catch (error) {
              retryCount++
              console.error(`‚ùå Offline loading attempt ${retryCount} failed:`, error)

              if (retryCount < maxRetries) {
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π - –¥–∞—Ç—å IndexedDB –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
                console.log(`‚è≥ Waiting 1s before retry ${retryCount + 1}...`)
                await new Promise((resolve) => setTimeout(resolve, 1000))
              } else {
                console.log("‚ùå All cache loading attempts failed")
                // Failed to load from cache after all retries
              }
            }
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        const localData = getDataStats()
        if (localData.hasData) {
          // Found local data, showing migration modal
          setShowMigrationModal(true)
        }
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞

        setIsInitialized(true)
      } catch (_error) {
        // Error initializing data
        setIsInitialized(true)
      }
    }

    initializeData()
  }, [
    isAuthenticated,
    user?.id, // –¢–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
    authLoading,
    isInitialized,
    // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º isOnline - –Ω–µ —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
    isOnline,
    user
  ])

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
  // (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
  /*
  useEffect(() => {
    if (isOnline && isAuthenticated && isInitialized && syncStatus.pendingOperations > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
      const timer = setTimeout(() => {
        syncNow().catch(() => {
          // Sync failed, will be retried later
        })
      }, 2000)

      return (): void => clearTimeout(timer)
    }
  }, [isOnline, isAuthenticated, isInitialized, syncStatus.pendingOperations, syncNow])
  */

  const handleMigrationClose = useCallback((): void => {
    setShowMigrationModal(false)
    // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const { fetchCategories: freshFetchCategories } = useCategoryStoreSupabase.getState()
    const { fetchTransactions: freshFetchTransactions } = useTransactionStoreSupabase.getState()
    freshFetchCategories()
    freshFetchTransactions()
  }, [])

  const renderPage = (): JSX.Element => {
    switch (currentPage) {
      case "dashboard":
        return (
          <Suspense fallback={<PageLoadingSpinner />}>
            <Dashboard onPageChange={setCurrentPage} />
          </Suspense>
        )
      case "transactions":
        return (
          <Suspense fallback={<PageLoadingSpinner />}>
            <Transactions />
          </Suspense>
        )
      case "analytics":
        return (
          <Suspense fallback={<PageLoadingSpinner />}>
            <Analytics />
          </Suspense>
        )
      case "savings":
        return (
          <Suspense fallback={<PageLoadingSpinner />}>
            <Savings />
          </Suspense>
        )
      case "settings":
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
            <p className="text-gray-600">–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
          </div>
        )
      default:
        return (
          <Suspense fallback={<PageLoadingSpinner />}>
            <Dashboard />
          </Suspense>
        )
    }
  }

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const PageLoadingSpinner = (): JSX.Element => (
    <div className="flex items-center justify-center py-12">
      <div className="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
      <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
    </div>
  )

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  if (isAuthenticated && !isInitialized) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IndexedDB –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
      <AutoFixIndexedDB />

      <Layout currentPage={currentPage} onPageChange={setCurrentPage}>
        {renderPage()}
      </Layout>

      <DataMigrationModal isOpen={showMigrationModal} onClose={handleMigrationClose} />
    </>
  )
}
